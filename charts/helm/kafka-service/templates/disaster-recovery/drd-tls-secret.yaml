{{- $secretName := include "disasterRecovery.tlsSecretName" . }}
{{- $install := and (eq (include "kafka-service.enableDisasterRecovery" .) "true") .Values.global.tls.enabled .Values.global.disasterRecovery.tls.enabled ( or .Values.global.tls.generateCerts.enabled (eq (include "disasterRecovery.certificatesSpecified" .) "true"))  }}
{{- if and $install (eq (include "services.certProvider" .) "helm") (not (lookup "v1" "Secret" .Release.Namespace $secretName)) }}
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: {{ $secretName }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "kafka-services.defaultLabels" . | nindent 4 }}
  annotations:
    "helm.sh/resource-policy": keep
data:
{{- if not .Values.global.tls.generateCerts.enabled }}
  {{- if .Values.global.disasterRecovery.tls.certificates.crt }}
  tls.crt: {{ .Values.global.disasterRecovery.tls.certificates.crt | quote }}
  {{- end }}
  {{- if .Values.global.disasterRecovery.tls.certificates.key }}
  tls.key: {{ .Values.global.disasterRecovery.tls.certificates.key | quote }}
  {{- end }}
  {{- if .Values.global.disasterRecovery.tls.certificates.ca }}
  ca.crt: {{ .Values.global.disasterRecovery.tls.certificates.ca | quote }}
  {{- end }}
{{- else }}
{{ ( include "disasterRecovery.generateCerts" . ) | indent 2 }}
{{ end }}
{{- end }}
