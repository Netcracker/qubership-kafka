name: Build Artifacts
permissions:
  contents: read
  packages: write
  actions: read
on:
  repository_dispatch:
    types: [kafka-patched-build]

concurrency:
  group: ${{ github.ref_type == 'branch' && format('build-branch-{0}', github.ref_name) || format('build-{0}', github.sha) }}
  cancel-in-progress: true

jobs:
  prepare-inputs:
    runs-on: ubuntu-latest
    outputs:
      build_args: ${{ steps.set-vars.outputs.build_args }}
    steps:
      - name: Set Variables
        if: github.event_name == 'repository_dispatch' && github.event.action == 'kafka-patched-build'
        id: set-vars
        run: |
          kafka_distro_tgz="${KAFKA_DISTRO_URL##*/}"
          echo 'build_args<<EOF' >> $GITHUB_OUTPUT
          echo "KAFKA_DISTRO_URL=${KAFKA_DISTRO_URL}" >> $GITHUB_OUTPUT
          echo "DISTRO_NAME=${kafka_distro_tgz%.*}" >> $GITHUB_OUTPUT
          echo "KAFKA_VERSION=${KAFKA_VERSION}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
        env:
          KAFKA_DISTRO_URL: ${{ github.event.client_payload.kafka-distro-url }}
          KAFKA_VERSION: ${{ github.event.client_payload.kafka-version }}
      - name: Debug
        run: |
          echo "build_args: ${{ steps.set-vars.outputs.build_args }}"

  prepare:
    name: "Prepare Images and Metadata"
    runs-on: ubuntu-latest
    outputs:
      components: ${{ steps.load.outputs.components }}
      platforms: ${{ steps.load.outputs.platforms }}
      tags: "${{ steps.meta.outputs.result }}"
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - id: load
        run: |
          echo "components=$(jq -c '.components' .github/dev-build-config.json)" >> "$GITHUB_OUTPUT"
          echo "platforms=$(jq -c '.platforms' .github/dev-build-config.json)" >> "$GITHUB_OUTPUT"

      - name: Create tags for images
        uses: netcracker/qubership-workflow-hub/actions/metadata-action@0f2be042d7c833c6bf60df85732609b7991fb821 #2.0.0
        id: meta
        with:
          default-template: "{{ref-name}}"
          extra-tags: ${{ github.event.inputs.tags }}
          replace-symbol: ${{ github.event.inputs.replace-symbol }}
          dry-run: ${{ inputs.dry-run }}

  build:
    name: Build Docker Images
    needs: [prepare-inputs, prepare]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        component: ${{ fromJson(needs.prepare.outputs.components) }}
    steps:
      - name: Docker
        uses: netcracker/qubership-workflow-hub/actions/docker-action@0f2be042d7c833c6bf60df85732609b7991fb821 #2.0.0
        with:
          ref: ${{ github.ref }}
          dry-run: ${{ inputs.dry-run }}
          download-artifact: false
          component: ${{ toJson(matrix.component) }}
          platforms: ${{ needs.prepare.outputs.platforms }}
          tags: ${{ needs.prepare.outputs.tags }}
          build-args: ${{ needs.prepare-inputs.outputs.build_args }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # multiplatform_build:
  #   needs: [prepare-inputs]
  #   if: github.event.pull_request.user.login != 'dependabot[bot]' || github.event_name == 'pull_request'
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       component:
  #         - name: qubership-kafka-integration-tests
  #           file: integration-tests/docker/Dockerfile
  #           context: integration-tests
  #         - name: qubership-kafka-crd-init
  #           file: crd-init/docker/Dockerfile
  #           context: crd-init
  #         - name: qubership-kafka-operator
  #           file: operator/Dockerfile
  #           context: operator
  #         - name: qubership-kafka-service-operator
  #           file: operator/Dockerfile
  #           context: operator
  #         - name: qubership-kafka-service-transfer
  #           file: docker-transfer/kafka-service/Dockerfile
  #           context: ""
  #         - name: qubership-kafka-transfer
  #           file: docker-transfer/kafka/Dockerfile
  #           context: ""
  #         - name: qubership-kafka-backup-daemon
  #           file: backup-daemon/docker/Dockerfile
  #           context: backup-daemon
  #         - name: qubership-kafka-monitoring
  #           file: monitoring/docker/Dockerfile
  #           context: monitoring
  #         - name: qubership-docker-kafka
  #           file: docker-kafka/docker/Dockerfile
  #           context: docker-kafka
  #         - name: qubership-docker-akhq
  #           file: docker-akhq/docker/Dockerfile
  #           context: docker-akhq
  #         - name: qubership-docker-kafka-lag-exporter
  #           file: lag-exporter/docker/Dockerfile
  #           context: lag-exporter
  #         - name: qubership-docker-cruise-control
  #           file: docker-cruise-control/docker/Dockerfile
  #           context: docker-cruise-control
  #         - name: qubership-kafka-mirror-maker-monitoring
  #           file: mirror-maker-monitoring/docker/Dockerfile
  #           context: mirror-maker-monitoring
  #         - name: qubership-docker-kafka-mirror-maker
  #           file: mirror-maker/docker/Dockerfile
  #           context: mirror-maker
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${GITHUB_ACTOR}
  #         password: ${{secrets.GITHUB_TOKEN}}
  #     - name: Prepare Tag
  #       run: echo "TAG_NAME=$(echo ${TAG_NAME} | sed 's@refs/tags/@@;s@refs/heads/@@;s@/@_@g')" >> $GITHUB_ENV
  #     - name: Prepare Group
  #       run: echo "GITHUB_GROUP=${GITHUB_GROUP,,}" >> $GITHUB_ENV
  #     - name: Get package IDs for delete
  #       id: get-ids-for-delete
  #       uses: Netcracker/get-package-ids@v0.0.1
  #       with:
  #         component-name: ${{ matrix.component.name }}
  #         component-tag: ${{ env.TAG_NAME }}
  #         access-token: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build and push
  #       uses: docker/build-push-action@v6
  #       with:
  #         no-cache: true
  #         context: ${{ matrix.component.context }}
  #         file: ${{ matrix.component.file }}
  #         platforms: linux/amd64,linux/arm64
  #         push: ${{ github.event_name != 'pull_request' && github.actor != 'dependabot[bot]' }}
  #         tags: ghcr.io/${{ env.GITHUB_GROUP }}/${{ matrix.component.name }}:${{ env.TAG_NAME }}
  #         provenance: false
  #         build-args: ${{ needs.prepare-inputs.outputs.build_args }}
