name: Build Artifacts
permissions:
  contents: read
  packages: write
  actions: read
on:
  release:
    types: [created]
  push:
    branches:
      - '**'
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - 'CODE-OF-CONDUCT.md'
      - 'CONTRIBUTING.md'
      - 'LICENSE'
      - 'README.md'
      - 'SECURITY.md'
  pull_request:
    branches:
      - '**'
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - 'CODE-OF-CONDUCT.md'
      - 'CONTRIBUTING.md'
      - 'LICENSE'
      - 'README.md'
      - 'SECURITY.md'
  repository_dispatch:
    types: [kafka-patched-build]
env:
  TAG_NAME: ${{ github.event.release.tag_name || github.ref }}
  GITHUB_GROUP: ${{ github.repository_owner }}

concurrency:
  # On main/release, we don't want any jobs cancelled so the sha is used to name the group
  # On PR branches, we cancel the job if new commits are pushed
  # More info: https://stackoverflow.com/a/68422069/253468
  group: ${{ github.ref == 'refs/heads/main' && format('ci-main-{0}', github.sha) || format('ci-main-{0}', github.ref) }}
  cancel-in-progress: true

jobs:
  prepare-inputs:
    runs-on: ubuntu-latest
    outputs:
      kafka_distro_url: ${{ steps.set-vars.outputs.kafka_distro_url }}
      kafka_distro: ${{ steps.set-vars.outputs.kafka_distro }}
      kafka_version: ${{ steps.set-vars.outputs.kafka_version }}
    steps:
      - name: Set Variables
        if: github.event_name == 'repository_dispatch' && github.event.action == 'kafka-patched-build'
        id: set-vars
        run: |
          echo "kafka_distro_url=${KAFKA_DISTRO_URL}" >> $GITHUB_OUTPUT
          echo "kafka_distro=${KAFKA_DISTRO_URL##*/}" >> $GITHUB_OUTPUT
          echo "kafka_version=${KAFKA_VERSION}" >> $GITHUB_OUTPUT
        env:
          KAFKA_DISTRO_URL: ${{ github.event.client_payload.kafka-distro-url }}
          KAFKA_VERSION: ${{ github.event.client_payload.kafka-version }}
      - name: Debug
        run: |
          echo "kafka_distro_url: ${{ steps.set-vars.outputs.kafka_distro_url }}"
          echo "kafka_distro: ${{ steps.set-vars.outputs.kafka_distro }}"
          echo "kafka_version: ${{ steps.set-vars.outputs.kafka_version }}"

  multiplatform_build:
    needs: [prepare-inputs]
    if: github.event.pull_request.user.login != 'dependabot[bot]' || github.event_name == 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        component:
          - name: qubership-kafka-integration-tests
            file: integration-tests/docker/Dockerfile
            context: integration-tests
          - name: qubership-kafka-crd-init
            file: crd-init/docker/Dockerfile
            context: crd-init
          - name: qubership-kafka-operator
            file: operator/Dockerfile
            context: operator
          - name: qubership-kafka-service-operator
            file: operator/Dockerfile
            context: operator
          - name: qubership-kafka-service-transfer
            file: docker-transfer/kafka-service/Dockerfile
            context: ""
          - name: qubership-kafka-transfer
            file: docker-transfer/kafka/Dockerfile
            context: ""
          - name: qubership-kafka-backup-daemon
            file: backup-daemon/docker/Dockerfile
            context: backup-daemon
          - name: qubership-kafka-monitoring
            file: monitoring/docker/Dockerfile
            context: monitoring
          - name: qubership-docker-kafka
            file: docker-kafka/docker/Dockerfile
            context: docker-kafka
          - name: qubership-docker-akhq
            file: docker-akhq/docker/Dockerfile
            context: docker-akhq
          - name: qubership-docker-kafka-lag-exporter
            file: lag-exporter/docker/Dockerfile
            context: lag-exporter
          - name: qubership-docker-cruise-control
            file: docker-cruise-control/docker/Dockerfile
            context: docker-cruise-control
          - name: qubership-kafka-mirror-maker-monitoring
            file: mirror-maker-monitoring/docker/Dockerfile
            context: mirror-maker-monitoring
          - name: qubership-docker-kafka-mirror-maker
            file: mirror-maker/docker/Dockerfile
            context: mirror-maker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${GITHUB_ACTOR}
          password: ${{secrets.GITHUB_TOKEN}}
      - name: Prepare Tag
        run: echo "TAG_NAME=$(echo ${TAG_NAME} | sed 's@refs/tags/@@;s@refs/heads/@@;s@/@_@g')" >> $GITHUB_ENV
      - name: Prepare Group
        run: echo "GITHUB_GROUP=${GITHUB_GROUP,,}" >> $GITHUB_ENV
      - name: Get package IDs for delete
        id: get-ids-for-delete
        uses: Netcracker/get-package-ids@v0.0.1
        with:
          component-name: ${{ matrix.component.name }}
          component-tag: ${{ env.TAG_NAME }}
          access-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          no-cache: true
          context: ${{ matrix.component.context }}
          file: ${{ matrix.component.file }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' && github.actor != 'dependabot[bot]' }}
          tags: ghcr.io/${{ env.GITHUB_GROUP }}/${{ matrix.component.name }}:${{ env.TAG_NAME }}
          provenance: false
          build-args: |
            KAFKA_DISTRO_URL=${{ needs.prepare-inputs.outputs.kafka_distro_url }}
            DISTRO_NAME=${{ needs.prepare-inputs.outputs.kafka_distro }}
            KAFKA_VERSION=${{ needs.prepare-inputs.outputs.kafka_version }}
