/*
 * Copyright 2017 LinkedIn Corp. Licensed under the BSD 2-Clause License (the "License"). See License in the project root for license information.
 */
import com.linkedin.gradle.build.DistributeTask

plugins {
    id "com.jfrog.artifactory"
    id "idea"
    id "jacoco" // Java Code Coverage plugin
    id "checkstyle"
}

group = 'com.linkedin.cruisecontrol'

project.ext {
    buildVersionFileName = "cruise-control-version.properties"
    commitId = project.hasProperty('commitId') ? commitId : null
    scalaBinaryVersion = getScalaBinaryVersion(scalaVersion)
}

allprojects {

    repositories {
        mavenCentral()
    }
}

subprojects {
    group = rootProject.group
    version = rootProject.version

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'

    // This project requires Java 11
    sourceCompatibility = JavaVersion.VERSION_11

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set("sources")
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier.set("javadoc")
        from javadoc.destinationDir
    }

    jar {
        from "$rootDir/LICENSE"
        from "$rootDir/NOTICE"
    }

}

project(':cruise-control-core') {
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.artifactory'

    dependencies {
        configurations.all {
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
            exclude group: 'log4j', module: 'log4j'
        }
        implementation "org.slf4j:slf4j-api:1.7.36"
        implementation "org.apache.logging.log4j:log4j-slf4j-impl:2.17.2"
        implementation 'org.apache.commons:commons-math3:3.6.1'
        api "org.eclipse.jetty:jetty-servlet:${jettyVersion}"
        implementation 'com.google.code.findbugs:jsr305:3.0.2'

        api "io.vertx:vertx-core:${vertxVersion}"
        api "io.vertx:vertx-web:${vertxVersion}"

    }

    publishing {
        publications {
            java(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom.withXml {
                    def root = asNode()
                    root.appendNode('name', 'cruise-control-core')
                    root.appendNode('description', 'cruise control core related')
                    root.children().last() + rootProject.ext.pomConfig
                }
            }
        }
    }

    artifactoryPublish.dependsOn assemble
    artifactoryPublish.dependsOn publishToMavenLocal

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
        }

    }

}

project(':cruise-control') {
    apply plugin: 'scala'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.artifactory'

    //needed because our java classes depend on scala classes, so must be compiled by scala
    sourceSets {
        main {
            java {
                srcDirs = []
            }

            scala {
                srcDirs = ['src/main/java', 'src/main/scala']
            }
        }
    }

    dependencies {
        configurations.all {
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
            exclude group: 'log4j', module: 'log4j'
        }

        api project(':cruise-control-metrics-reporter')
        api project(':cruise-control-core')
        implementation "org.slf4j:slf4j-api:1.7.36"
        implementation "org.apache.logging.log4j:log4j-slf4j-impl:2.17.2"
        implementation "org.apache.zookeeper:zookeeper:${zookeeperVersion}"
        implementation "io.netty:netty-handler:${nettyVersion}"
        implementation "io.netty:netty-transport-native-epoll:${nettyVersion}"
        api "org.apache.kafka:kafka_$scalaBinaryVersion:$kafkaVersion"
        api "org.apache.kafka:kafka-clients:$kafkaVersion"
        // Add following dependency when upgrading to Kafka 3.5
        api "org.apache.kafka:kafka-storage:$kafkaVersion"
        implementation "org.scala-lang:scala-library:$scalaVersion"
        implementation 'org.apache.commons:commons-math3:3.6.1'
        implementation 'org.apache.httpcomponents:httpclient:4.5.13'
        implementation 'commons-codec:commons-codec:1.15'
        implementation 'com.google.code.gson:gson:2.9.0'
        implementation "org.eclipse.jetty:jetty-server:${jettyVersion}"
        implementation 'io.dropwizard.metrics:metrics-jmx:4.2.9'
        implementation 'com.nimbusds:nimbus-jose-jwt:9.24'
        implementation 'io.swagger.parser.v3:swagger-parser-v3:2.1.16'
        implementation 'io.github.classgraph:classgraph:4.8.141'
        implementation 'com.google.code.findbugs:jsr305:3.0.2'
        // Temporary pin for vulnerability
        implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
        api "io.vertx:vertx-web-openapi:${vertxVersion}"
        api "io.vertx:vertx-core:${vertxVersion}"
        api "io.vertx:vertx-web:${vertxVersion}"
        api "io.vertx:vertx-junit5:${vertxVersion}"
        api 'io.swagger.core.v3:swagger-annotations:2.0.2'
        api 'io.swagger.core.v3:swagger-core:2.0.2'
        api 'com.google.guava:guava:32.1.3-jre'
        api 'org.json:json:20231013'
        api 'org.xerial.snappy:snappy-java:1.1.10.4'
    }

    publishing {
        publications {
            java(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom.withXml {
                    def root = asNode()
                    root.appendNode('name', 'cruise-control')
                    root.appendNode('description', 'cruise control related')
                    root.children().last() + rootProject.ext.pomConfig
                }
            }
        }
    }

    artifactoryPublish.dependsOn assemble
    artifactoryPublish.dependsOn publishToMavenLocal

    tasks.create(name: "copyDependantLibs", type: Copy) {
        from (configurations.testRuntimeClasspath) {
            include('log4j-slf4j-impl*')
        }
        from (configurations.runtimeClasspath) {

        }
        into "$buildDir/dependant-libs"
        duplicatesStrategy 'exclude'
    }

    tasks.create(name: "buildFatJar", type: Jar, dependsOn: ["createVersionFile", ":cruise-control-metrics-reporter:jar", ":cruise-control-core:jar"]) {
        archiveBaseName = project.name + '-all'
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
        manifest {
            attributes("Multi-Release": true)
        }
        with jar
    }

    compileScala.finalizedBy(tasks.copyDependantLibs)

    task determineCommitId {
        def takeFromHash = 40
        if (commitId) {
            commitId = commitId.take(takeFromHash)
        } else if (file("$rootDir/.git/HEAD").exists()) {
            def headRef = file("$rootDir/.git/HEAD").text
            if (headRef.contains('ref: ')) {
                headRef = headRef.replaceAll('ref: ', '').trim()
                if (file("$rootDir/.git/$headRef").exists()) {
                    commitId = file("$rootDir/.git/$headRef").text.trim().take(takeFromHash)
                }
            } else {
                commitId = headRef.trim().take(takeFromHash)
            }
        } else {
            commitId = "unknown"
        }
    }

    // Referenced similar method for getting software version in Kafka code.
    task createVersionFile(dependsOn: determineCommitId) {
        ext.receiptFile = file("$buildDir/cruise-control/$buildVersionFileName")
        outputs.file receiptFile
        outputs.upToDateWhen { false }
        doLast {
            def data = [
                    commitId: commitId,
                    version: version,
            ]

            receiptFile.parentFile.mkdirs()
            def content = data.entrySet().collect { "$it.key=$it.value" }.sort().join("\n")
            receiptFile.setText(content, "ISO-8859-1")
        }
    }

    jar {
        dependsOn createVersionFile
        from("$buildDir") {
            include "cruise-control/$buildVersionFileName"
        }
    }
}

project(':cruise-control-metrics-reporter') {
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.artifactory'

    dependencies {
        configurations.all {
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
            exclude group: 'log4j', module: 'log4j'
        }

        implementation "org.slf4j:slf4j-api:1.7.36"
        implementation "com.yammer.metrics:metrics-core:2.2.0"
        implementation "org.apache.logging.log4j:log4j-slf4j-impl:2.17.2"
        implementation "org.apache.kafka:kafka_$scalaBinaryVersion:$kafkaVersion"
        implementation "org.apache.kafka:kafka-clients:$kafkaVersion"
        implementation 'com.google.code.findbugs:jsr305:3.0.2'
        // Temporary pin for vulnerability
        implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    }

    publishing {
        publications {
            java(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom.withXml {
                    def root = asNode()
                    root.appendNode('name', 'cruise-control-metrics-reporter')
                    root.appendNode('description', 'cruise control metrics reporter related')
                    root.children().last() + rootProject.ext.pomConfig
                }
            }
        }
    }

    artifactoryPublish.dependsOn assemble
    artifactoryPublish.dependsOn publishToMavenLocal

}

artifactoryPublish.skip = true

task distributeBuild(type: DistributeTask) {
    dependsOn ':artifactoryPublish', ':cruise-control:artifactoryPublish', ':cruise-control-core:artifactoryPublish', ':cruise-control-metrics-reporter:artifactoryPublish'
}

task buildApiWiki(type: Exec) {
    workingDir '.'
    commandLine './build_api_wiki.sh'
}

static def getScalaBinaryVersion(versionStr) {
    String[] versionList = versionStr.split("\\.")
    return versionList[0] + "." + versionList[1]
}

//wrapper generation task
wrapper {
    gradleVersion = '7.4'
    distributionType = Wrapper.DistributionType.ALL
}
